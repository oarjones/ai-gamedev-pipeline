Desarrollar un sistema completo de templates para diferentes tipos de juegos.

CONTEXTO:
- Necesitamos templates pre-configurados para géneros comunes
- Templates deben ser extensibles y customizables
- Incluir código base, assets, y configuración

REQUISITOS:

1. TEMPLATE ENGINE:
   Crear mcp_unity_bridge/src/templates/template_engine.py:
   python
   class TemplateEngine:
       def load_template(name: str) -> GameTemplate
       def list_available_templates() -> List[TemplateInfo]
       def create_custom_template(base_template: str, modifications: dict)
       def validate_template(template: GameTemplate) -> List[ValidationError]
       def apply_template(template: GameTemplate, project_path: str)
       def merge_templates(template_a: GameTemplate, template_b: GameTemplate)

2. TEMPLATE STRUCTURE:
   Definir estructura en templates/:
   templates/
   ├── 2d_platformer/
   │   ├── manifest.yaml
   │   ├── scripts/
   │   │   ├── PlayerController.cs
   │   │   ├── EnemyAI.cs
   │   │   └── GameManager.cs
   │   ├── prefabs/
   │   ├── materials/
   │   ├── settings/
   │   │   ├── InputSystem.asset
   │   │   └── Physics2D.asset
   │   └── scenes/
   │       ├── MainMenu.unity
   │       └── GameLevel.unity
   ├── 3d_fps/
   ├── puzzle_game/
   ├── racing_game/
   └── rpg_template/

3. TEMPLATE MANIFEST:
   Formato YAML para manifest.yaml:
   yaml
   name: "2D Platformer"
   version: "1.0.0"
   unity_version: "2023.3+"
   description: "Classic 2D platformer with physics"
   
   dependencies:
     packages:
       - com.unity.inputsystem: "1.7.0"
       - com.unity.cinemachine: "2.9.7"
       - com.unity.2d.sprite: "1.0.0"
   
   parameters:
     - name: "player_speed"
       type: "float"
       default: 5.0
       description: "Player movement speed"
     
     - name: "jump_height"
       type: "float"  
       default: 2.0
     
     - name: "enemy_count"
       type: "int"
       default: 3
   
   scripts:
     - src: "PlayerController.cs"
       target: "Assets/Scripts/Player/"
       parameters: ["player_speed", "jump_height"]
   
   scenes:
     - name: "MainMenu"
       is_default: true
     - name: "Level1"
       
   post_install:
     - script: "ConfigureInput.cs"
     - script: "GenerateLevel.cs"

4. CODE GENERATORS:
   Generadores específicos por template:
   python
   class CodeGenerator:
       def generate_player_controller(params: dict) -> str
       def generate_enemy_ai(ai_type: str, difficulty: str) -> str
       def generate_game_manager(game_mode: str) -> str
       def generate_save_system(storage_type: str) -> str
       def generate_inventory_system(slots: int, stackable: bool) -> str

5. ASSET GENERATORS:
   Generación procedural de assets básicos:
   python
   class AssetGenerator:
       def create_placeholder_sprites(count: int, style: str)
       def generate_terrain(size: tuple, type: str)
       def create_ui_elements(theme: str)
       def generate_sound_effects(type: str)

6. TEMPLATE CUSTOMIZER UI:
   Web UI para customizar templates:
   - Formulario dinámico según parameters
   - Preview de cambios
   - Validación en tiempo real
   - Export de configuración

7. TEMPLATE MARKETPLACE:
   Sistema para compartir templates:
   python
   class TemplateMarketplace:
       def upload_template(template: GameTemplate, author: str)
       def download_template(template_id: str)
       def rate_template(template_id: str, rating: int)
       def search_templates(query: str, filters: dict)

TEMPLATES INCLUIDOS:
1. **2D Platformer**: Mario-style con física
2. **3D FPS**: Shooter básico con armas
3. **Top-Down RPG**: Sistema de stats y combate
4. **Puzzle Game**: Match-3 o sliding puzzle


