Tarea 13: Dashboard UI - Panel de Contexto

**Objetivo**: Vista del contexto en tiempo real.

**Prompt para el agente IA**:
Crea webapp/src/components/ContextPanel.tsx:
typescriptimport React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiGet, apiPost } from '../lib/api';
import { useWebSocket } from '../hooks/useWebSocket';
import ReactMarkdown from 'react-markdown';
import { format } from 'date-fns';

interface Context {
  version: number;
  current_task: string | null;
  done_tasks: string[];
  pending_tasks: number;
  summary: string;
  decisions: string[];
  open_questions: string[];
  risks: string[];
  last_update?: string;
}

export function ContextPanel({ projectId }: { projectId: string }) {
  const [activeTab, setActiveTab] = useState<'global' | 'task' | 'history'>('global');
  const [isEditing, setIsEditing] = useState(false);
  const [editedContext, setEditedContext] = useState<Context | null>(null);
  const queryClient = useQueryClient();

  // Cargar contexto activo
  const { data: globalContext, refetch } = useQuery({
    queryKey: ['context', projectId, 'global'],
    queryFn: () => apiGet(`/api/v1/context?projectId=${projectId}&scope=global`)
  });

  // Cargar contexto de tarea actual
  const { data: taskContext } = useQuery({
    queryKey: ['context', projectId, 'task'],
    queryFn: () => apiGet(`/api/v1/context?projectId=${projectId}&scope=task`),
    enabled: !!globalContext?.current_task
  });

  // Historial de contextos
  const { data: contextHistory } = useQuery({
    queryKey: ['context-history', projectId],
    queryFn: () => apiGet(`/api/v1/context/history?projectId=${projectId}`),
    enabled: activeTab === 'history'
  });

  // WebSocket para actualizaciones en tiempo real
  const { lastMessage } = useWebSocket(`/ws/events?projectId=${projectId}`);

  useEffect(() => {
    if (lastMessage?.type === 'context.updated' || lastMessage?.type === 'context.generated') {
      refetch();
    }
  }, [lastMessage, refetch]);

  // Mutación para guardar contexto
  const saveContext = useMutation({
    mutationFn: (context: Context) => 
      apiPost(`/api/v1/context?projectId=${projectId}`, { 
        content: context,
        scope: 'global'
      }),
    onSuccess: () => {
      queryClient.invalidateQueries(['context']);
      setIsEditing(false);
    }
  });

  // Mutación para generar contexto
  const generateContext = useMutation({
    mutationFn: () => 
      apiPost(`/api/v1/context/generate?projectId=${projectId}`),
    onSuccess: () => {
      queryClient.invalidateQueries(['context']);
    }
  });

  const handleEdit = () => {
    setEditedContext(globalContext);
    setIsEditing(true);
  };

  const handleSave = () => {
    if (editedContext) {
      saveContext.mutate(editedContext);
    }
  };

  const renderGlobalContext = () => {
    const ctx = isEditing ? editedContext : globalContext;
    if (!ctx) return <div>No hay contexto disponible</div>;

    return (
      <div className="space-y-4">
        {/* Resumen */}
        <div>
          <h3 className="font-medium text-sm text-gray-600 mb-1">Resumen</h3>
          {isEditing ? (
            <textarea
              className="w-full border rounded p-2 h-24"
              value={ctx.summary}
              onChange={(e) => setEditedContext({
                ...ctx,
                summary: e.target.value
              })}
            />
          ) : (
            <div className="prose prose-sm">
              <ReactMarkdown>{ctx.summary}</ReactMarkdown>
            </div>
          )}
        </div>

        {/* Progreso */}
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-green-50 rounded p-3">
            <div className="text-sm text-gray-600">Completadas</div>
            <div className="text-2xl font-bold text-green-600">
              {ctx.done_tasks.length}
            </div>
          </div>
          <div className="bg-blue-50 rounded p-3">
            <div className="text-sm text-gray-600">Pendientes</div>
            <div className="text-2xl font-bold text-blue-600">
              {ctx.pending_tasks}
            </div>
          </div>
        </div>

        {/* Tarea actual */}
        {ctx.current_task && (
          <div className="bg-yellow-50 border-l-4 border-yellow-400 p-3">
            <div className="text-sm font-medium">Tarea Actual</div>
            <div className="text-lg">{ctx.current_task}</div>
          </div>
        )}

        {/* Decisiones */}
        <EditableList
          title="Decisiones"
          items={ctx.decisions}
          isEditing={isEditing}
          onChange={(decisions) => setEditedContext({ ...ctx!, decisions })}
        />

        {/* Preguntas abiertas */}
        <EditableList
          title="Preguntas Abiertas"
          items={ctx.open_questions}
          isEditing={isEditing}
          onChange={(open_questions) => setEditedContext({ ...ctx!, open_questions })}
          itemClass="text-orange-600"
        />

        {/* Riesgos */}
        <EditableList
          title="Riesgos"
          items={ctx.risks}
          isEditing={isEditing}
          onChange={(risks) => setEditedContext({ ...ctx!, risks })}
          itemClass="text-red-600"
        />

        {/* Metadata */}
        <div className="text-xs text-gray-500 pt-2 border-t">
          <div>Versión: {ctx.version}</div>
          {ctx.last_update && (
            <div>Actualizado: {format(new Date(ctx.last_update), 'dd/MM/yyyy HH:mm')}</div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white rounded-lg shadow h-full flex flex-col">
      {/* Header con tabs */}
      <div className="border-b">
        <div className="flex justify-between items-center p-4">
          <h2 className="text-lg font-semibold">Contexto del Proyecto</h2>
          <div className="flex gap-2">
            {!isEditing ? (
              <>
                <button
                  className="btn btn-sm btn-secondary"
                  onClick={handleEdit}
                >
                  Editar
                </button>
                <button
                  className="btn btn-sm btn-primary"
                  onClick={() => generateContext.mutate()}
                  disabled={generateContext.isPending}
                >
                  Generar
                </button>
              </>
            ) : (
              <>
                <button
                  className="btn btn-sm btn-secondary"
                  onClick={() => setIsEditing(false)}
                >
                  Cancelar
                </button>
                <button
                  className="btn btn-sm btn-primary"
                  onClick={handleSave}
                >
                  Guardar
                </button>
              </>
            )}
          </div>
        </div>
        
        {/* Tabs */}
        <div className="flex border-t">
          {(['global', 'task', 'history'] as const).map(tab => (
            <button
              key={tab}
              className={`px-4 py-2 text-sm font-medium capitalize ${
                activeTab === tab 
                  ? 'border-b-2 border-blue-500 text-blue-600' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
              onClick={() => setActiveTab(tab)}
            >
              {tab === 'global' ? 'Global' : 
               tab === 'task' ? 'Tarea Actual' : 
               'Historial'}
            </button>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-auto p-4">
        {activeTab === 'global' && renderGlobalContext()}
        {activeTab === 'task' && (
          <TaskContextView context={taskContext} />
        )}
        {activeTab === 'history' && (
          <ContextHistory history={contextHistory} />
        )}
      </div>
    </div>
  );
}

// Componente para listas editables
function EditableList({ 
  title, 
  items, 
  isEditing, 
  onChange, 
  itemClass = '' 
}: any) {
  const handleAdd = () => {
    onChange([...items, '']);
  };

  const handleRemove = (index: number) => {
    onChange(items.filter((_: any, i: number) => i !== index));
  };

  const handleChange = (index: number, value: string) => {
    const newItems = [...items];
    newItems[index] = value;
    onChange(newItems);
  };

  return (
    <div>
      <h3 className="font-medium text-sm text-gray-600 mb-2">{title}</h3>
      <ul className="space-y-1">
        {items.map((item: string, index: number) => (
          <li key={index} className="flex items-center gap-2">
            {isEditing ? (
              <>
                <input
                  className="flex-1 border rounded px-2 py-1 text-sm"
                  value={item}
                  onChange={(e) => handleChange(index, e.target.value)}
                />
                <button
                  className="text-red-500 text-sm"
                  onClick={() => handleRemove(index)}
                >
                  ×
                </button>
              </>
            ) : (
              <span className={`text-sm ${itemClass}`}>• {item}</span>
            )}
          </li>
        ))}
      </ul>
      {isEditing && (
        <button
          className="text-sm text-blue-600 mt-2"
          onClick={handleAdd}
        >
          + Añadir
        </button>
      )}
    </div>
  );
}

// Vista de contexto de tarea
function TaskContextView({ context }: any) {
  if (!context) {
    return <div className="text-gray-500">No hay contexto de tarea disponible</div>;
  }

  return (
    <div className="space-y-4">
      <div>
        <h3 className="font-medium text-sm text-gray-600 mb-1">Tarea</h3>
        <div className="text-lg">{context.task_code}</div>
      </div>
      
      <div>
        <h3 className="font-medium text-sm text-gray-600 mb-1">Resumen</h3>
        <p className="text-sm">{context.summary}</p>
      </div>

      {/* Más detalles del contexto de tarea */}
    </div>
  );
}

// Historial de contextos
function ContextHistory({ history }: any) {
  if (!history || history.length === 0) {
    return <div className="text-gray-500">No hay historial disponible</div>;
  }

  return (
    <div className="space-y-2">
      {history.map((item: any) => (
        <div key={item.id} className="border rounded p-3">
          <div className="flex justify-between items-start">
            <div>
              <div className="font-medium">Versión {item.version}</div>
              <div className="text-sm text-gray-600">
                {format(new Date(item.created_at), 'dd/MM/yyyy HH:mm')}
              </div>
            </div>
            <span className="text-xs bg-gray-100 px-2 py-1 rounded">
              {item.created_by}
            </span>
          </div>
        </div>
      ))}
    </div>
  );
}



*Contexto General de la Arquitectura
Estamos construyendo un sistema de gestión de desarrollo de videojuegos asistido por IA que:
Gestiona proyectos con planes de tareas versionados
Mantiene contexto evolutivo (global y por tarea)
Coordina agentes IA con herramientas MCP
Permite consenso usuario-IA en la planificación
Genera y actualiza contexto automáticamente

*Buenas Prácticas para la Implementación
Base de Datos: Usar siempre `data/gateway.db`
Principios SOLID: Cada componente con responsabilidad única
Idempotencia: Operaciones repetibles sin efectos secundarios
Versionado Semántico: Cambios compatibles hacia atrás
Transacciones Atómicas: Todo o nada en operaciones críticas
Logging Estructurado: Trazabilidad completa con correlation IDs
Eventos: WebSocket para actualizaciones en tiempo real
Tests Unitarios: Mínimo 80% cobertura en lógica de negocio
Documentación API: OpenAPI actualizado con cada cambio